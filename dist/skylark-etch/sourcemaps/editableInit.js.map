{"version":3,"sources":["editableInit.js"],"names":["define","etch","models","views","editableInit","e","stopPropagation","target","srcElement","$editable","$","etchFindEditable","attr","$editor","editorModel","data","length","get","set","editable","editableModel","this","model","editorAttrs","document","body","appendChild","etchInstantiate","classType","attrs","execCommand","err","message","EditableImage","$imgs","find","each","$this","editableImageModel","el","tagName","unbind","bind","not","remove","config","selector","position","x","pageX","y","pageY"],"mappings":";;;;;;;AAAAA,QACE,UACA,SAASC,GACT,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MAEjB,OAAOF,EAAKG,aAAe,SAASC,GAElCA,EAAEC,kBACF,IAAIC,EAASF,EAAEE,QAAUF,EAAEG,WACvBC,EAAYC,EAAEH,GAAQI,mBAC1BF,EAAUG,KAAK,mBAAmB,GAGlC,IAAIC,EAAUH,EAAE,sBACZI,EAAcD,EAAQE,KAAK,SAC/B,GAAKF,EAAQG,OAQFP,EAAU,KAAOK,EAAYG,IAAI,YAAY,IAEtDH,EAAYI,KACVC,SAAUV,EACVW,cAAeC,KAAKC,YAZH,CACnBT,EAAUH,EAAE,mCACZ,IAAIa,GAAgBJ,SAAUV,EAAWW,cAAeC,KAAKC,OAC7DE,SAASC,KAAKC,YAAYb,EAAQ,IAClCA,EAAQc,iBAAiBC,UAAW,SAAUC,MAAON,IACrDT,EAAcD,EAAQE,KAAK,SAa7B,IACES,SAASM,YAAY,gBAAgB,GAAO,GAE9C,MAAOC,GAEL,GAAoB,sBAAhBA,EAAIC,QACN,MAAMD,EAIV,GAAI7B,EAAO+B,cAAe,CAExB,IAAIC,EAAQzB,EAAU0B,KAAK,OAC3B,GAAID,EAAMlB,OAAQ,CAChB,IAAIa,GAAUV,SAAUV,EAAWW,cAAeC,KAAKC,OACvDY,EAAME,KAAK,WACT,IAAIC,EAAQ3B,EAAEW,MACd,IAAKgB,EAAMtB,KAAK,sBAAuB,CACrC,IAAIuB,EAAsB,IAAIpC,EAAO+B,cAAcJ,GAC3B,IAAI1B,EAAM8B,eAAeX,MAAOgB,EAAoBC,GAAIlB,KAAMmB,QAASnB,KAAKmB,UACpGH,EAAMtB,KAAK,qBAAsBuB,OASzC5B,EAAE,QAAQ+B,OAAO,oBAAoBC,KAAK,mBAAoB,SAASrC,GAErE,IAAIE,EAASF,EAAEE,QAAUF,EAAEG,WACvBE,EAAEH,GAAQoC,IAAI,oFAAoF3B,SAEpGH,EAAQ+B,SAGJ1C,EAAO+B,gBAETxB,EAAU0B,KAAK,OAAOM,OAAO,cAG7B/B,EAAET,EAAK4C,OAAOC,SAAS,QAAQ/B,KAAK,sBAAsB,IAI5DL,EAAEW,MAAMoB,OAAO,uBAInB3B,EAAYI,KAAK6B,UAAWC,EAAG3C,EAAE4C,MAAQ,GAAIC,EAAG7C,EAAE8C,MAAQ","file":"../editableInit.js","sourcesContent":["define([\r\n  \"./etch\"\r\n],function(etch){\r\n  var models = etch.models,\r\n      views = etch.views;\r\n\r\n  return etch.editableInit = function(e) {\r\n\r\n    e.stopPropagation();\r\n    var target = e.target || e.srcElement;\r\n    var $editable = $(target).etchFindEditable();\r\n    $editable.attr('contenteditable', true);\r\n\r\n    // if the editor isn't already built, build it\r\n    var $editor = $('.etch-editor-panel');\r\n    var editorModel = $editor.data('model');\r\n    if (!$editor.length) {\r\n      $editor = $('<div class=\"etch-editor-panel\">');\r\n      var editorAttrs = { editable: $editable, editableModel: this.model };\r\n      document.body.appendChild($editor[0]);\r\n      $editor.etchInstantiate({classType: 'Editor', attrs: editorAttrs});\r\n      editorModel = $editor.data('model');\r\n\r\n    // check if we are on a new editable\r\n    } else if ($editable[0] !== editorModel.get('editable')[0]) {\r\n      // set new editable\r\n      editorModel.set({\r\n        editable: $editable,\r\n        editableModel: this.model\r\n      });\r\n    }\r\n    \r\n    // Firefox seems to be only browser that defaults to `StyleWithCSS == true`\r\n    // so we turn it off here. Plus a try..catch to avoid an error being thrown in IE8.\r\n    try {\r\n      document.execCommand('StyleWithCSS', false, false);\r\n    }\r\n    catch (err) {\r\n      // expecting to just eat IE8 error, but if different error, rethrow\r\n      if (err.message !== \"Invalid argument.\") {\r\n        throw err;\r\n      }\r\n    }\r\n\r\n    if (models.EditableImage) {\r\n      // instantiate any images that may be in the editable\r\n      var $imgs = $editable.find('img');\r\n      if ($imgs.length) {\r\n        var attrs = { editable: $editable, editableModel: this.model };\r\n        $imgs.each(function() {\r\n          var $this = $(this);\r\n          if (!$this.data('editableImageModel')) {\r\n            var editableImageModel =  new models.EditableImage(attrs);\r\n            var editableImageView = new views.EditableImage({model: editableImageModel, el: this, tagName: this.tagName});\r\n            $this.data('editableImageModel', editableImageModel);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // listen for mousedowns that are not coming from the editor\r\n    // and close the editor\r\n    // unbind first to make sure we aren't doubling up on listeners\r\n    $('body').unbind('mousedown.editor').bind('mousedown.editor', function(e) {\r\n      // check to see if the click was in an etch tool\r\n      var target = e.target || e.srcElement;\r\n      if ($(target).not('.etch-editor-panel, .etch-editor-panel *, .etch-image-tools, .etch-image-tools *').length) {\r\n        // remove editor\r\n        $editor.remove();\r\n                  \r\n                  \r\n        if (models.EditableImage) {\r\n          // unblind the image-tools if the editor isn't active\r\n          $editable.find('img').unbind('mouseenter');\r\n\r\n          // remove any latent image tool model references\r\n          $(etch.config.selector+' img').data('editableImageModel', false)\r\n        }\r\n                  \r\n        // once the editor is removed, remove the body binding for it\r\n        $(this).unbind('mousedown.editor');\r\n      }\r\n    });\r\n\r\n    editorModel.set({position: {x: e.pageX - 15, y: e.pageY - 80}});\r\n  };\r\n});"]}