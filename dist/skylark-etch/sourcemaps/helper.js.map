{"version":3,"sources":["helper.js"],"names":["define","langx","$","etch","fn","etchInstantiate","options","cb","this","each","$el","settings","el","attrs","extend","model","models","classType","isFunction","views","view","tagName","data","etchFindEditable","is","config","selector","closest"],"mappings":";;;;;;;AAAAA,QACC,sBACA,0BACA,UACC,SAASC,EAAMC,EAAEC,GAEjBD,EAAEE,GAAGC,gBAAkB,SAASC,EAASC,GACvC,OAAOC,KAAKC,KAAK,WACf,IAAIC,EAAMR,EAAEM,MACZF,IAAYA,MAEZ,IAAIK,GACFC,GAAIJ,KACJK,UAGFZ,EAAMa,OAAOH,EAAUL,GAEvB,IAAIS,EAAQ,IAAIZ,EAAKa,OAAOL,EAASM,WAAWN,EAASE,MAAOF,GAGhE,GAAIV,EAAMiB,WAAWf,EAAKgB,MAAMR,EAASM,YACvC,IAAIG,EAAO,IAAIjB,EAAKgB,MAAMR,EAASM,YAAYF,MAAOA,EAAOH,GAAIJ,KAAMa,QAASb,KAAKa,UAIvFX,EAAIY,MAAMP,MAAOA,IACjBL,EAAIY,MAAMF,KAAMA,IAEZnB,EAAMiB,WAAWX,IACnBA,GAAIQ,MAAOA,EAAOK,KAAMA,OAK9BlB,EAAEE,GAAGmB,iBAAmB,WAGtB,IAAIb,EAAMR,EAAEM,MACZ,OAAOE,EAAIc,GAAGrB,EAAKsB,OAAOC,UAAYhB,EAAMA,EAAIiB,QAAQxB,EAAKsB,OAAOC","file":"../helper.js","sourcesContent":["define([\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-utils-dom/query\",\r\n\t\"./etch\"\r\n],function(langx,$,etch){\r\n  // jquery helper functions\r\n  $.fn.etchInstantiate = function(options, cb) {\r\n    return this.each(function() {\r\n      var $el = $(this);\r\n      options || (options = {});\r\n\r\n      var settings = {\r\n        el: this,\r\n        attrs: {}\r\n      }\r\n\r\n      langx.extend(settings, options);\r\n\r\n      var model = new etch.models[settings.classType](settings.attrs, settings);\r\n\r\n      // initialize a view is there is one\r\n      if (langx.isFunction(etch.views[settings.classType])) {\r\n        var view = new etch.views[settings.classType]({model: model, el: this, tagName: this.tagName});\r\n      }\r\n           \r\n      // stash the model and view on the elements data object\r\n      $el.data({model: model});\r\n      $el.data({view: view});\r\n\r\n      if (langx.isFunction(cb)) {\r\n        cb({model: model, view: view});\r\n      }\r\n    });\r\n  }\r\n\r\n  $.fn.etchFindEditable = function() {\r\n    // function that looks for the editable selector on itself or its parents\r\n    // and returns that el when it is found\r\n    var $el = $(this);\r\n    return $el.is(etch.config.selector) ? $el : $el.closest(etch.config.selector);\r\n  }\r\n  \r\n});"]}