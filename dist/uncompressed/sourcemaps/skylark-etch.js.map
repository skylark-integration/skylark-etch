{"version":3,"sources":["skylark-etch.js"],"names":[],"mappingsfile":"../skylark-etch.js","sourcesContent":["define('skylark-etch/etch',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\"\n],function(skylark,langx) {\n\t'use strict';\n\n\tvar models = {},\n\t\tviews = {},\n\t\tcollections = {},\n\t\tetch = {};\n\n\t// versioning as per semver.org\n\tetch.VERSION = '0.6.3';\n\n\n\t// tack on models, views, etc... as well as init function\n\tlangx.extend(etch, {\n\t\tmodels: models,\n\t\tviews: views,\n\t\tcollections: collections,\n\t});\n\n\n\treturn langx.attach(skylark,\"itg.etch\",etch);\n});\n\ndefine('skylark-etch/config',[\r\n  \"./etch\"\r\n],function(etch){\r\n  return etch.config = {\r\n    // selector to specify editable elements   \r\n    selector: '.editable',\r\n      \r\n    // Named sets of buttons to be specified on the editable element\r\n    // in the markup as \"data-button-class\"   \r\n    buttonClasses: {\r\n      'default': ['save'],\r\n      'all': [\r\n        'bold', \r\n        'superscript',\r\n        'subscript', \r\n        'italic', \r\n        'underline', \r\n        \"heading\",\r\n        \"justify-left\",\r\n        \"justify-center\",\r\n        \"justify-right\",\r\n        'unordered-list', \r\n        'ordered-list', \r\n        'link', \r\n        'clear-formatting', \r\n        'save'\r\n      ],\r\n      'title': [\r\n        'bold', \r\n        'superscript',\r\n        'subscript', \r\n        'italic', \r\n        'underline', \r\n        'save'\r\n      ]\r\n    }\r\n  };\r\n\r\n })\r\n;\ndefine('skylark-etch/models/Editor',[\r\n\t\"skylark-backbone/Model\",\r\n\t\"../etch\"\r\n],function(Model,etch){\r\n  \treturn etch.models.Editor = Model;\r\n});\r\n\ndefine('skylark-etch/views/Editor',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-underscore/underscore\",\r\n  \"skylark-backbone/View\",\r\n  \"../etch\"\r\n],function(langx,_,View,etch) {\r\n  \r\n  return etch.views.Editor = View.extend({\r\n    initialize: function() {\r\n      this.$el = $(this.el);\r\n            \r\n      // Model attribute event listeners:\r\n      _.bindAll(this, 'changeButtons', 'changePosition', 'changeEditable', 'insertImage');\r\n      this.model.bind('change:buttons', this.changeButtons);\r\n      this.model.bind('change:position', this.changePosition);\r\n      this.model.bind('change:editable', this.changeEditable);\r\n\r\n      // Init Routines:\r\n      this.changeEditable();\r\n    },\r\n\r\n    events: {\r\n      'click .etch-bold': 'toggleBold',\r\n      'click .etch-superscript': 'toggleSuperscript',\r\n      'click .etch-subscript': 'toggleSubscript',\r\n      'click .etch-italic': 'toggleItalic',\r\n      'click .etch-underline': 'toggleUnderline',\r\n      'click .etch-heading': 'toggleHeading',\r\n      'click .etch-unordered-list': 'toggleUnorderedList',\r\n      'click .etch-justify-left': 'justifyLeft',\r\n      'click .etch-justify-center': 'justifyCenter',\r\n      'click .etch-justify-right': 'justifyRight',\r\n      'click .etch-ordered-list': 'toggleOrderedList',\r\n      'click .etch-link': 'toggleLink',\r\n      'click .etch-image': 'getImage',\r\n      'click .etch-save': 'save',\r\n      'click .etch-clear-formatting': 'clearFormatting'\r\n    },\r\n        \r\n    changeEditable: function() {\r\n      this.setButtonClass();\r\n      // Im assuming that Ill add more functionality here\r\n    },\r\n\r\n    setButtonClass: function() {\r\n      // check the button class of the element being edited and set the associated buttons on the model\r\n      var editorModel = this.model;\r\n      var buttonClass = editorModel.get('editable').attr('data-button-class') || 'default';\r\n      editorModel.set({ buttons: etch.config.buttonClasses[buttonClass] });\r\n    },\r\n\r\n    changeButtons: function() {\r\n      // render the buttons into the editor-panel\r\n      this.$el.empty();\r\n      var view = this;\r\n      var buttons = this.model.get('buttons');\r\n            \r\n      // hide editor panel if there are no buttons in it and exit early\r\n      if (!buttons.length) { $(this.el).hide(); return; }\r\n            \r\n      _.each(this.model.get('buttons'), function(button){\r\n        var $buttonEl = $('<a href=\"#\" class=\"etch-editor-button etch-'+ button +'\" title=\"'+ button.replace('-', ' ') +'\"><span></span></a>');\r\n        view.$el.append($buttonEl);\r\n      });\r\n            \r\n      $(this.el).show('fast');\r\n    },\r\n\r\n    changePosition: function() {\r\n      // animate editor-panel to new position\r\n      var pos = this.model.get('position');\r\n      this.$el.animate({'top': pos.y, 'left': pos.x}, { queue: false });\r\n    },\r\n        \r\n    wrapSelection: function(selectionOrRange, elString, cb) {\r\n      // wrap current selection with elString tag\r\n      var range = selectionOrRange === Range ? selectionOrRange : selectionOrRange.getRangeAt(0);\r\n      var el = document.createElement(elString);\r\n      range.surroundContents(el);\r\n    },\r\n        \r\n    clearFormatting: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('removeFormat', false, null);\r\n    },\r\n        \r\n    toggleBold: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('bold', false, null);\r\n    },\r\n\r\n    toggleSubscript: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('subscript', false, null);\r\n    },\r\n\r\n    toggleSuperscript: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('superscript', false, null);\r\n    },\r\n\r\n    toggleItalic: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('italic', false, null);\r\n    },\r\n\r\n    toggleUnderline: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('underline', false, null);\r\n    },\r\n        \r\n    toggleHeading: function(e) {\r\n      e.preventDefault();\r\n      var range = window.getSelection().getRangeAt(0);\r\n      var wrapper = range.commonAncestorContainer.parentElement\r\n      if ($(wrapper).is('h3')) {\r\n        $(wrapper).replaceWith(wrapper.textContent)\r\n        return;\r\n      }\r\n      var h3 = document.createElement('h3');\r\n      range.surroundContents(h3);\r\n    },\r\n\r\n    urlPrompt: function(callback) {\r\n      // This uses the default browser UI prompt to get a url.\r\n      // Override this function if you want to implement a custom UI.\r\n        \r\n      var url = prompt('Enter a url', 'http://');\r\n      \r\n      if (null === url) {\r\n          return;\r\n      }\r\n        \r\n      // Ensure a new link URL starts with http:// or https:// \r\n      // before it's added to the DOM.\r\n      //\r\n      // NOTE: This implementation will disallow relative URLs from being added\r\n      // but will make it easier for users typing external URLs.\r\n      if (/^((http|https)...)/.test(url)) {\r\n        callback(url);\r\n      } else {\r\n        callback(\"http://\" + url);\r\n      }\r\n    },\r\n    \r\n    toggleLink: function(e) {\r\n      e.preventDefault();\r\n      var range = window.getSelection().getRangeAt(0);\r\n\r\n      // are we in an anchor element?\r\n      if (range.startContainer.parentNode.tagName === 'A' || range.endContainer.parentNode.tagName === 'A') {\r\n        // unlink anchor\r\n        document.execCommand('unlink', false, null);\r\n      } else {\r\n        // promt for url and create link\r\n        this.urlPrompt(function(url) {\r\n          document.execCommand('createLink', false, url);\r\n        });\r\n      }\r\n    },\r\n\r\n    toggleUnorderedList: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('insertUnorderedList', false, null);\r\n    },\r\n\r\n    toggleOrderedList: function(e){\r\n      e.preventDefault();\r\n      document.execCommand('insertOrderedList', false, null);\r\n    },\r\n        \r\n    justifyLeft: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('justifyLeft', false, null);\r\n    },\r\n\r\n    justifyCenter: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('justifyCenter', false, null);\r\n    },\r\n\r\n    justifyRight: function(e) {\r\n      e.preventDefault();\r\n      document.execCommand('justifyRight', false, null);\r\n    },\r\n\r\n    getImage: function(e) {\r\n      e.preventDefault();\r\n\r\n      // call startUploader with callback to handle inserting it once it is uploaded/cropped\r\n      this.startUploader(this.insertImage);\r\n    },\r\n        \r\n    startUploader: function(cb) {\r\n      // initialize Image Uploader\r\n      var model = new models.ImageUploader();\r\n      var view = new views.ImageUploader({model: model});\r\n            \r\n      // stash a reference to the callback to be called after image is uploaded\r\n      model._imageCallback = function(image) {\r\n        view.startCropper(image, cb);\r\n      };\r\n\r\n\r\n      // stash reference to saved range for inserting the image once its \r\n      this._savedRange = window.getSelection().getRangeAt(0);\r\n\r\n      // insert uploader html into DOM\r\n      $('body').append(view.render().el);\r\n    },\r\n        \r\n    insertImage: function(image) {\r\n      // insert image - passed as a callback to startUploader\r\n      var sel = window.getSelection();\r\n      sel.removeAllRanges();\r\n      sel.addRange(this._savedRange);\r\n            \r\n      var attrs = {\r\n        'editable': this.model.get('editable'),\r\n        'editableModel': this.model.get('editableModel')\r\n      };\r\n            \r\n      _.extend(attrs, image);\r\n\r\n      var model = new models.EditableImage(attrs);\r\n      var view = new views.EditableImage({model: model});\r\n      this._savedRange.insertNode($(view.render().el).addClass('etch-float-left')[0]);\r\n    },\r\n        \r\n    save: function(e) {\r\n      e.preventDefault();\r\n      var editableModel = this.model.get('editableModel');\r\n      editableModel.trigger('save');\r\n    }\r\n  });\r\n  });\r\n  \ndefine('skylark-etch/editableInit',[\r\n  \"./etch\"\r\n],function(etch){\r\n  var models = etch.models,\r\n      views = etch.views;\r\n\r\n  return etch.editableInit = function(e) {\r\n\r\n    e.stopPropagation();\r\n    var target = e.target || e.srcElement;\r\n    var $editable = $(target).etchFindEditable();\r\n    $editable.attr('contenteditable', true);\r\n\r\n    // if the editor isn't already built, build it\r\n    var $editor = $('.etch-editor-panel');\r\n    var editorModel = $editor.data('model');\r\n    if (!$editor.length) {\r\n      $editor = $('<div class=\"etch-editor-panel\">');\r\n      var editorAttrs = { editable: $editable, editableModel: this.model };\r\n      document.body.appendChild($editor[0]);\r\n      $editor.etchInstantiate({classType: 'Editor', attrs: editorAttrs});\r\n      editorModel = $editor.data('model');\r\n\r\n    // check if we are on a new editable\r\n    } else if ($editable[0] !== editorModel.get('editable')[0]) {\r\n      // set new editable\r\n      editorModel.set({\r\n        editable: $editable,\r\n        editableModel: this.model\r\n      });\r\n    }\r\n    \r\n    // Firefox seems to be only browser that defaults to `StyleWithCSS == true`\r\n    // so we turn it off here. Plus a try..catch to avoid an error being thrown in IE8.\r\n    try {\r\n      document.execCommand('StyleWithCSS', false, false);\r\n    }\r\n    catch (err) {\r\n      // expecting to just eat IE8 error, but if different error, rethrow\r\n      if (err.message !== \"Invalid argument.\") {\r\n        throw err;\r\n      }\r\n    }\r\n\r\n    if (models.EditableImage) {\r\n      // instantiate any images that may be in the editable\r\n      var $imgs = $editable.find('img');\r\n      if ($imgs.length) {\r\n        var attrs = { editable: $editable, editableModel: this.model };\r\n        $imgs.each(function() {\r\n          var $this = $(this);\r\n          if (!$this.data('editableImageModel')) {\r\n            var editableImageModel =  new models.EditableImage(attrs);\r\n            var editableImageView = new views.EditableImage({model: editableImageModel, el: this, tagName: this.tagName});\r\n            $this.data('editableImageModel', editableImageModel);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // listen for mousedowns that are not coming from the editor\r\n    // and close the editor\r\n    // unbind first to make sure we aren't doubling up on listeners\r\n    $('body').unbind('mousedown.editor').bind('mousedown.editor', function(e) {\r\n      // check to see if the click was in an etch tool\r\n      var target = e.target || e.srcElement;\r\n      if ($(target).not('.etch-editor-panel, .etch-editor-panel *, .etch-image-tools, .etch-image-tools *').length) {\r\n        // remove editor\r\n        $editor.remove();\r\n                  \r\n                  \r\n        if (models.EditableImage) {\r\n          // unblind the image-tools if the editor isn't active\r\n          $editable.find('img').unbind('mouseenter');\r\n\r\n          // remove any latent image tool model references\r\n          $(etch.config.selector+' img').data('editableImageModel', false)\r\n        }\r\n                  \r\n        // once the editor is removed, remove the body binding for it\r\n        $(this).unbind('mousedown.editor');\r\n      }\r\n    });\r\n\r\n    editorModel.set({position: {x: e.pageX - 15, y: e.pageY - 80}});\r\n  };\r\n});\ndefine('skylark-etch/helper',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-utils-dom/query\",\r\n\t\"./etch\"\r\n],function(langx,$,etch){\r\n  // jquery helper functions\r\n  $.fn.etchInstantiate = function(options, cb) {\r\n    return this.each(function() {\r\n      var $el = $(this);\r\n      options || (options = {});\r\n\r\n      var settings = {\r\n        el: this,\r\n        attrs: {}\r\n      }\r\n\r\n      langx.extend(settings, options);\r\n\r\n      var model = new etch.models[settings.classType](settings.attrs, settings);\r\n\r\n      // initialize a view is there is one\r\n      if (langx.isFunction(etch.views[settings.classType])) {\r\n        var view = new etch.views[settings.classType]({model: model, el: this, tagName: this.tagName});\r\n      }\r\n           \r\n      // stash the model and view on the elements data object\r\n      $el.data({model: model});\r\n      $el.data({view: view});\r\n\r\n      if (langx.isFunction(cb)) {\r\n        cb({model: model, view: view});\r\n      }\r\n    });\r\n  }\r\n\r\n  $.fn.etchFindEditable = function() {\r\n    // function that looks for the editable selector on itself or its parents\r\n    // and returns that el when it is found\r\n    var $el = $(this);\r\n    return $el.is(etch.config.selector) ? $el : $el.closest(etch.config.selector);\r\n  }\r\n  \r\n});\ndefine('skylark-etch/main',[\r\n\t\"./etch\",\r\n\t\"./config\",\r\n\t\"./models/Editor\",\r\n\t\"./views/Editor\",\r\n\t\"./editableInit\",\r\n\t\"./helper\"\r\n],function(etch){\r\n\treturn etch;\r\n});\ndefine('skylark-etch', ['skylark-etch/main'], function (main) { return main; });\n\n"]}